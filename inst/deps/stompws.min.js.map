{"version":3,"file":"stompws.min.js","mappings":"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","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///external window \"React\"","webpack:///external window \"PropTypes\"","webpack:///./node_modules/@stomp/stompjs/esm6/byte.js","webpack:///./node_modules/@stomp/stompjs/esm6/frame-impl.js","webpack:///./node_modules/@stomp/stompjs/esm6/parser.js","webpack:///./node_modules/@stomp/stompjs/esm6/types.js","webpack:///./node_modules/@stomp/stompjs/esm6/versions.js","webpack:///./node_modules/@stomp/stompjs/esm6/stomp-handler.js","webpack:///./node_modules/@stomp/stompjs/esm6/augment-websocket.js","webpack:///./node_modules/@stomp/stompjs/esm6/client.js","webpack:///./src/lib/components/STOMPWebsocket.react.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","var getCurrentScript = function() {\n    var script = document.currentScript;\n    if (!script) {\n        /* Shim for IE11 and below */\n        /* Do not take into account async scripts and inline scripts */\n\n        var doc_scripts = document.getElementsByTagName('script');\n        var scripts = [];\n\n        for (var i = 0; i < doc_scripts.length; i++) {\n            scripts.push(doc_scripts[i]);\n        }\n\n        scripts = scripts.filter(function(s) { return !s.async && !s.text && !s.textContent; });\n        script = scripts.slice(-1)[0];\n    }\n\n    return script;\n};\n\nvar isLocalScript = function(script) {\n    return /\\/_dash-component-suites\\//.test(script.src);\n};\n\nObject.defineProperty(__webpack_require__, 'p', {\n    get: (function () {\n        var script = getCurrentScript();\n\n        var url = script.src.split('/').slice(0, -1).join('/') + '/';\n\n        return function() {\n            return url;\n        };\n    })()\n});\n\nif (typeof jsonpScriptSrc !== 'undefined') {\n    var __jsonpScriptSrc__ = jsonpScriptSrc;\n    jsonpScriptSrc = function(chunkId) {\n        var script = getCurrentScript();\n        var isLocal = isLocalScript(script);\n\n        var src = __jsonpScriptSrc__(chunkId);\n\n        if(!isLocal) {\n            return src;\n        }\n\n        var srcFragments = src.split('/');\n        var fileFragments = srcFragments.slice(-1)[0].split('.');\n\n        fileFragments.splice(1, 0, \"v0_0_1m1726860854\");\n        srcFragments.splice(-1, 1, fileFragments.join('.'))\n\n        return srcFragments.join('/');\n    };\n}\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"React\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"PropTypes\"];","/**\n * Some byte values, used as per STOMP specifications.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport const BYTE = {\n    // LINEFEED byte (octet 10)\n    LF: '\\x0A',\n    // NULL byte (octet 0)\n    NULL: '\\x00',\n};\n//# sourceMappingURL=byte.js.map","import { BYTE } from './byte.js';\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\nexport class FrameImpl {\n    /**\n     * Frame constructor. `command`, `headers` and `body` are available as properties.\n     *\n     * @internal\n     */\n    constructor(params) {\n        const { command, headers, body, binaryBody, escapeHeaderValues, skipContentLengthHeader, } = params;\n        this.command = command;\n        this.headers = Object.assign({}, headers || {});\n        if (binaryBody) {\n            this._binaryBody = binaryBody;\n            this.isBinaryBody = true;\n        }\n        else {\n            this._body = body || '';\n            this.isBinaryBody = false;\n        }\n        this.escapeHeaderValues = escapeHeaderValues || false;\n        this.skipContentLengthHeader = skipContentLengthHeader || false;\n    }\n    /**\n     * body of the frame\n     */\n    get body() {\n        if (!this._body && this.isBinaryBody) {\n            this._body = new TextDecoder().decode(this._binaryBody);\n        }\n        return this._body || '';\n    }\n    /**\n     * body as Uint8Array\n     */\n    get binaryBody() {\n        if (!this._binaryBody && !this.isBinaryBody) {\n            this._binaryBody = new TextEncoder().encode(this._body);\n        }\n        // At this stage it will definitely have a valid value\n        return this._binaryBody;\n    }\n    /**\n     * deserialize a STOMP Frame from raw data.\n     *\n     * @internal\n     */\n    static fromRawFrame(rawFrame, escapeHeaderValues) {\n        const headers = {};\n        const trim = (str) => str.replace(/^\\s+|\\s+$/g, '');\n        // In case of repeated headers, as per standards, first value need to be used\n        for (const header of rawFrame.headers.reverse()) {\n            const idx = header.indexOf(':');\n            const key = trim(header[0]);\n            let value = trim(header[1]);\n            if (escapeHeaderValues &&\n                rawFrame.command !== 'CONNECT' &&\n                rawFrame.command !== 'CONNECTED') {\n                value = FrameImpl.hdrValueUnEscape(value);\n            }\n            headers[key] = value;\n        }\n        return new FrameImpl({\n            command: rawFrame.command,\n            headers,\n            binaryBody: rawFrame.binaryBody,\n            escapeHeaderValues,\n        });\n    }\n    /**\n     * @internal\n     */\n    toString() {\n        return this.serializeCmdAndHeaders();\n    }\n    /**\n     * serialize this Frame in a format suitable to be passed to WebSocket.\n     * If the body is string the output will be string.\n     * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n     *\n     * @internal\n     */\n    serialize() {\n        const cmdAndHeaders = this.serializeCmdAndHeaders();\n        if (this.isBinaryBody) {\n            return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n        }\n        else {\n            return cmdAndHeaders + this._body + BYTE.NULL;\n        }\n    }\n    serializeCmdAndHeaders() {\n        const lines = [this.command];\n        if (this.skipContentLengthHeader) {\n            delete this.headers['content-length'];\n        }\n        for (const name of Object.keys(this.headers || {})) {\n            const value = this.headers[name];\n            if (this.escapeHeaderValues &&\n                this.command !== 'CONNECT' &&\n                this.command !== 'CONNECTED') {\n                lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n            }\n            else {\n                lines.push(`${name}:${value}`);\n            }\n        }\n        if (this.isBinaryBody ||\n            (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n            lines.push(`content-length:${this.bodyLength()}`);\n        }\n        return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n    }\n    isBodyEmpty() {\n        return this.bodyLength() === 0;\n    }\n    bodyLength() {\n        const binaryBody = this.binaryBody;\n        return binaryBody ? binaryBody.length : 0;\n    }\n    /**\n     * Compute the size of a UTF-8 string by counting its number of bytes\n     * (and not the number of characters composing the string)\n     */\n    static sizeOfUTF8(s) {\n        return s ? new TextEncoder().encode(s).length : 0;\n    }\n    static toUnit8Array(cmdAndHeaders, binaryBody) {\n        const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n        const nullTerminator = new Uint8Array([0]);\n        const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n        uint8Frame.set(uint8CmdAndHeaders);\n        uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n        uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n        return uint8Frame;\n    }\n    /**\n     * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n     *\n     * @internal\n     */\n    static marshall(params) {\n        const frame = new FrameImpl(params);\n        return frame.serialize();\n    }\n    /**\n     *  Escape header values\n     */\n    static hdrValueEscape(str) {\n        return str\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/:/g, '\\\\c');\n    }\n    /**\n     * UnEscape header values\n     */\n    static hdrValueUnEscape(str) {\n        return str\n            .replace(/\\\\r/g, '\\r')\n            .replace(/\\\\n/g, '\\n')\n            .replace(/\\\\c/g, ':')\n            .replace(/\\\\\\\\/g, '\\\\');\n    }\n}\n//# sourceMappingURL=frame-impl.js.map","/**\n * @internal\n */\nconst NULL = 0;\n/**\n * @internal\n */\nconst LF = 10;\n/**\n * @internal\n */\nconst CR = 13;\n/**\n * @internal\n */\nconst COLON = 58;\n/**\n * This is an evented, rec descent parser.\n * A stream of Octets can be passed and whenever it recognizes\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\n *\n * All incoming Octets are fed into _onByte function.\n * Depending on current state the _onByte function keeps changing.\n * Depending on the state it keeps accumulating into _token and _results.\n * State is indicated by current value of _onByte, all states are named as _collect.\n *\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n * imply that all lengths are considered in bytes (instead of string lengths).\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n *\n * There is no peek function on the incoming data.\n * When a state change occurs based on an Octet without consuming the Octet,\n * the Octet, after state change, is fed again (_reinjectByte).\n * This became possible as the state change can be determined by inspecting just one Octet.\n *\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\n * otherwise it is determined by NULL terminator.\n *\n * Following the standards, the command and headers are converted to Strings\n * and the body is returned as Octets.\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n *\n * This parser does not use Regular Expressions as that can only operate on Strings.\n *\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n * is pushed.\n *\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n * (which is protocol version specific), and convert body to text.\n *\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class Parser {\n    constructor(onFrame, onIncomingPing) {\n        this.onFrame = onFrame;\n        this.onIncomingPing = onIncomingPing;\n        this._encoder = new TextEncoder();\n        this._decoder = new TextDecoder();\n        this._token = [];\n        this._initState();\n    }\n    parseChunk(segment, appendMissingNULLonIncoming = false) {\n        let chunk;\n        if (typeof segment === 'string') {\n            chunk = this._encoder.encode(segment);\n        }\n        else {\n            chunk = new Uint8Array(segment);\n        }\n        // See https://github.com/stomp-js/stompjs/issues/89\n        // Remove when underlying issue is fixed.\n        //\n        // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n        if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n            const chunkWithNull = new Uint8Array(chunk.length + 1);\n            chunkWithNull.set(chunk, 0);\n            chunkWithNull[chunk.length] = 0;\n            chunk = chunkWithNull;\n        }\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < chunk.length; i++) {\n            const byte = chunk[i];\n            this._onByte(byte);\n        }\n    }\n    // The following implements a simple Rec Descent Parser.\n    // The grammar is simple and just one byte tells what should be the next state\n    _collectFrame(byte) {\n        if (byte === NULL) {\n            // Ignore\n            return;\n        }\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            // Incoming Ping\n            this.onIncomingPing();\n            return;\n        }\n        this._onByte = this._collectCommand;\n        this._reinjectByte(byte);\n    }\n    _collectCommand(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.command = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaders(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._setupCollectBody();\n            return;\n        }\n        this._onByte = this._collectHeaderKey;\n        this._reinjectByte(byte);\n    }\n    _reinjectByte(byte) {\n        this._onByte(byte);\n    }\n    _collectHeaderKey(byte) {\n        if (byte === COLON) {\n            this._headerKey = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaderValue;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaderValue(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.headers.push([\n                this._headerKey,\n                this._consumeTokenAsUTF8(),\n            ]);\n            this._headerKey = undefined;\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _setupCollectBody() {\n        const contentLengthHeader = this._results.headers.filter((header) => {\n            return header[0] === 'content-length';\n        })[0];\n        if (contentLengthHeader) {\n            this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n            this._onByte = this._collectBodyFixedSize;\n        }\n        else {\n            this._onByte = this._collectBodyNullTerminated;\n        }\n    }\n    _collectBodyNullTerminated(byte) {\n        if (byte === NULL) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectBodyFixedSize(byte) {\n        // It is post decrement, so that we discard the trailing NULL octet\n        if (this._bodyBytesRemaining-- === 0) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _retrievedBody() {\n        this._results.binaryBody = this._consumeTokenAsRaw();\n        try {\n            this.onFrame(this._results);\n        }\n        catch (e) {\n            console.log(`Ignoring an exception thrown by a frame handler. Original exception: `, e);\n        }\n        this._initState();\n    }\n    // Rec Descent Parser helpers\n    _consumeByte(byte) {\n        this._token.push(byte);\n    }\n    _consumeTokenAsUTF8() {\n        return this._decoder.decode(this._consumeTokenAsRaw());\n    }\n    _consumeTokenAsRaw() {\n        const rawResult = new Uint8Array(this._token);\n        this._token = [];\n        return rawResult;\n    }\n    _initState() {\n        this._results = {\n            command: undefined,\n            headers: [],\n            binaryBody: undefined,\n        };\n        this._token = [];\n        this._headerKey = undefined;\n        this._onByte = this._collectFrame;\n    }\n}\n//# sourceMappingURL=parser.js.map","/**\n * Possible states for the IStompSocket\n */\nexport var StompSocketState;\n(function (StompSocketState) {\n    StompSocketState[StompSocketState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    StompSocketState[StompSocketState[\"OPEN\"] = 1] = \"OPEN\";\n    StompSocketState[StompSocketState[\"CLOSING\"] = 2] = \"CLOSING\";\n    StompSocketState[StompSocketState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(StompSocketState = StompSocketState || (StompSocketState = {}));\n/**\n * Possible activation state\n */\nexport var ActivationState;\n(function (ActivationState) {\n    ActivationState[ActivationState[\"ACTIVE\"] = 0] = \"ACTIVE\";\n    ActivationState[ActivationState[\"DEACTIVATING\"] = 1] = \"DEACTIVATING\";\n    ActivationState[ActivationState[\"INACTIVE\"] = 2] = \"INACTIVE\";\n})(ActivationState = ActivationState || (ActivationState = {}));\n//# sourceMappingURL=types.js.map","/**\n * Supported STOMP versions\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Versions {\n    /**\n     * Takes an array of versions, typical elements '1.2', '1.1', or '1.0'\n     *\n     * You will be creating an instance of this class if you want to override\n     * supported versions to be declared during STOMP handshake.\n     */\n    constructor(versions) {\n        this.versions = versions;\n    }\n    /**\n     * Used as part of CONNECT STOMP Frame\n     */\n    supportedVersions() {\n        return this.versions.join(',');\n    }\n    /**\n     * Used while creating a WebSocket\n     */\n    protocolVersions() {\n        return this.versions.map(x => `v${x.replace('.', '')}.stomp`);\n    }\n}\n/**\n * Indicates protocol version 1.0\n */\nVersions.V1_0 = '1.0';\n/**\n * Indicates protocol version 1.1\n */\nVersions.V1_1 = '1.1';\n/**\n * Indicates protocol version 1.2\n */\nVersions.V1_2 = '1.2';\n/**\n * @internal\n */\nVersions.default = new Versions([\n    Versions.V1_2,\n    Versions.V1_1,\n    Versions.V1_0,\n]);\n//# sourceMappingURL=versions.js.map","import { BYTE } from './byte.js';\nimport { FrameImpl } from './frame-impl.js';\nimport { Parser } from './parser.js';\nimport { StompSocketState, } from './types.js';\nimport { Versions } from './versions.js';\nimport { augmentWebsocket } from './augment-websocket.js';\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class StompHandler {\n    constructor(_client, _webSocket, config) {\n        this._client = _client;\n        this._webSocket = _webSocket;\n        this._connected = false;\n        this._serverFrameHandlers = {\n            // [CONNECTED Frame](https://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n            CONNECTED: frame => {\n                this.debug(`connected to server ${frame.headers.server}`);\n                this._connected = true;\n                this._connectedVersion = frame.headers.version;\n                // STOMP version 1.2 needs header values to be escaped\n                if (this._connectedVersion === Versions.V1_2) {\n                    this._escapeHeaderValues = true;\n                }\n                this._setupHeartbeat(frame.headers);\n                this.onConnect(frame);\n            },\n            // [MESSAGE Frame](https://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n            MESSAGE: frame => {\n                // the callback is registered when the client calls\n                // `subscribe()`.\n                // If there is no registered subscription for the received message,\n                // the default `onUnhandledMessage` callback is used that the client can set.\n                // This is useful for subscriptions that are automatically created\n                // on the browser side (e.g. [RabbitMQ's temporary\n                // queues](https://www.rabbitmq.com/stomp.html)).\n                const subscription = frame.headers.subscription;\n                const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n                // bless the frame to be a Message\n                const message = frame;\n                const client = this;\n                const messageId = this._connectedVersion === Versions.V1_2\n                    ? message.headers.ack\n                    : message.headers['message-id'];\n                // add `ack()` and `nack()` methods directly to the returned frame\n                // so that a simple call to `message.ack()` can acknowledge the message.\n                message.ack = (headers = {}) => {\n                    return client.ack(messageId, subscription, headers);\n                };\n                message.nack = (headers = {}) => {\n                    return client.nack(messageId, subscription, headers);\n                };\n                onReceive(message);\n            },\n            // [RECEIPT Frame](https://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n            RECEIPT: frame => {\n                const callback = this._receiptWatchers[frame.headers['receipt-id']];\n                if (callback) {\n                    callback(frame);\n                    // Server will acknowledge only once, remove the callback\n                    delete this._receiptWatchers[frame.headers['receipt-id']];\n                }\n                else {\n                    this.onUnhandledReceipt(frame);\n                }\n            },\n            // [ERROR Frame](https://stomp.github.com/stomp-specification-1.2.html#ERROR)\n            ERROR: frame => {\n                this.onStompError(frame);\n            },\n        };\n        // used to index subscribers\n        this._counter = 0;\n        // subscription callbacks indexed by subscriber's ID\n        this._subscriptions = {};\n        // receipt-watchers indexed by receipts-ids\n        this._receiptWatchers = {};\n        this._partialData = '';\n        this._escapeHeaderValues = false;\n        this._lastServerActivityTS = Date.now();\n        this.debug = config.debug;\n        this.stompVersions = config.stompVersions;\n        this.connectHeaders = config.connectHeaders;\n        this.disconnectHeaders = config.disconnectHeaders;\n        this.heartbeatIncoming = config.heartbeatIncoming;\n        this.heartbeatOutgoing = config.heartbeatOutgoing;\n        this.splitLargeFrames = config.splitLargeFrames;\n        this.maxWebSocketChunkSize = config.maxWebSocketChunkSize;\n        this.forceBinaryWSFrames = config.forceBinaryWSFrames;\n        this.logRawCommunication = config.logRawCommunication;\n        this.appendMissingNULLonIncoming = config.appendMissingNULLonIncoming;\n        this.discardWebsocketOnCommFailure = config.discardWebsocketOnCommFailure;\n        this.onConnect = config.onConnect;\n        this.onDisconnect = config.onDisconnect;\n        this.onStompError = config.onStompError;\n        this.onWebSocketClose = config.onWebSocketClose;\n        this.onWebSocketError = config.onWebSocketError;\n        this.onUnhandledMessage = config.onUnhandledMessage;\n        this.onUnhandledReceipt = config.onUnhandledReceipt;\n        this.onUnhandledFrame = config.onUnhandledFrame;\n    }\n    get connectedVersion() {\n        return this._connectedVersion;\n    }\n    get connected() {\n        return this._connected;\n    }\n    start() {\n        const parser = new Parser(\n        // On Frame\n        rawFrame => {\n            const frame = FrameImpl.fromRawFrame(rawFrame, this._escapeHeaderValues);\n            // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n            if (!this.logRawCommunication) {\n                this.debug(`<<< ${frame}`);\n            }\n            const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n            serverFrameHandler(frame);\n        }, \n        // On Incoming Ping\n        () => {\n            this.debug('<<< PONG');\n        });\n        this._webSocket.onmessage = (evt) => {\n            this.debug('Received data');\n            this._lastServerActivityTS = Date.now();\n            if (this.logRawCommunication) {\n                const rawChunkAsString = evt.data instanceof ArrayBuffer\n                    ? new TextDecoder().decode(evt.data)\n                    : evt.data;\n                this.debug(`<<< ${rawChunkAsString}`);\n            }\n            parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n        };\n        this._webSocket.onclose = (closeEvent) => {\n            this.debug(`Connection closed to ${this._webSocket.url}`);\n            this._cleanUp();\n            this.onWebSocketClose(closeEvent);\n        };\n        this._webSocket.onerror = (errorEvent) => {\n            this.onWebSocketError(errorEvent);\n        };\n        this._webSocket.onopen = () => {\n            // Clone before updating\n            const connectHeaders = Object.assign({}, this.connectHeaders);\n            this.debug('Web Socket Opened...');\n            connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n            connectHeaders['heart-beat'] = [\n                this.heartbeatOutgoing,\n                this.heartbeatIncoming,\n            ].join(',');\n            this._transmit({ command: 'CONNECT', headers: connectHeaders });\n        };\n    }\n    _setupHeartbeat(headers) {\n        if (headers.version !== Versions.V1_1 &&\n            headers.version !== Versions.V1_2) {\n            return;\n        }\n        // It is valid for the server to not send this header\n        // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n        if (!headers['heart-beat']) {\n            return;\n        }\n        // heart-beat header received from the server looks like:\n        //\n        //     heart-beat: sx, sy\n        const [serverOutgoing, serverIncoming] = headers['heart-beat']\n            .split(',')\n            .map((v) => parseInt(v, 10));\n        if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n            const ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n            this.debug(`send PING every ${ttl}ms`);\n            this._pinger = setInterval(() => {\n                if (this._webSocket.readyState === StompSocketState.OPEN) {\n                    this._webSocket.send(BYTE.LF);\n                    this.debug('>>> PING');\n                }\n            }, ttl);\n        }\n        if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n            const ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n            this.debug(`check PONG every ${ttl}ms`);\n            this._ponger = setInterval(() => {\n                const delta = Date.now() - this._lastServerActivityTS;\n                // We wait twice the TTL to be flexible on window's setInterval calls\n                if (delta > ttl * 2) {\n                    this.debug(`did not receive server activity for the last ${delta}ms`);\n                    this._closeOrDiscardWebsocket();\n                }\n            }, ttl);\n        }\n    }\n    _closeOrDiscardWebsocket() {\n        if (this.discardWebsocketOnCommFailure) {\n            this.debug('Discarding websocket, the underlying socket may linger for a while');\n            this.discardWebsocket();\n        }\n        else {\n            this.debug('Issuing close on the websocket');\n            this._closeWebsocket();\n        }\n    }\n    forceDisconnect() {\n        if (this._webSocket) {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeOrDiscardWebsocket();\n            }\n        }\n    }\n    _closeWebsocket() {\n        this._webSocket.onmessage = () => { }; // ignore messages\n        this._webSocket.close();\n    }\n    discardWebsocket() {\n        if (typeof this._webSocket.terminate !== 'function') {\n            augmentWebsocket(this._webSocket, (msg) => this.debug(msg));\n        }\n        // @ts-ignore - this method will be there at this stage\n        this._webSocket.terminate();\n    }\n    _transmit(params) {\n        const { command, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const frame = new FrameImpl({\n            command,\n            headers,\n            body,\n            binaryBody,\n            escapeHeaderValues: this._escapeHeaderValues,\n            skipContentLengthHeader,\n        });\n        let rawChunk = frame.serialize();\n        if (this.logRawCommunication) {\n            this.debug(`>>> ${rawChunk}`);\n        }\n        else {\n            this.debug(`>>> ${frame}`);\n        }\n        if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n            rawChunk = new TextEncoder().encode(rawChunk);\n        }\n        if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n            this._webSocket.send(rawChunk);\n        }\n        else {\n            let out = rawChunk;\n            while (out.length > 0) {\n                const chunk = out.substring(0, this.maxWebSocketChunkSize);\n                out = out.substring(this.maxWebSocketChunkSize);\n                this._webSocket.send(chunk);\n                this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n            }\n        }\n    }\n    dispose() {\n        if (this.connected) {\n            try {\n                // clone before updating\n                const disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n                if (!disconnectHeaders.receipt) {\n                    disconnectHeaders.receipt = `close-${this._counter++}`;\n                }\n                this.watchForReceipt(disconnectHeaders.receipt, frame => {\n                    this._closeWebsocket();\n                    this._cleanUp();\n                    this.onDisconnect(frame);\n                });\n                this._transmit({ command: 'DISCONNECT', headers: disconnectHeaders });\n            }\n            catch (error) {\n                this.debug(`Ignoring error during disconnect ${error}`);\n            }\n        }\n        else {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeWebsocket();\n            }\n        }\n    }\n    _cleanUp() {\n        this._connected = false;\n        if (this._pinger) {\n            clearInterval(this._pinger);\n            this._pinger = undefined;\n        }\n        if (this._ponger) {\n            clearInterval(this._ponger);\n            this._ponger = undefined;\n        }\n    }\n    publish(params) {\n        const { destination, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const hdrs = Object.assign({ destination }, headers);\n        this._transmit({\n            command: 'SEND',\n            headers: hdrs,\n            body,\n            binaryBody,\n            skipContentLengthHeader,\n        });\n    }\n    watchForReceipt(receiptId, callback) {\n        this._receiptWatchers[receiptId] = callback;\n    }\n    subscribe(destination, callback, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (!headers.id) {\n            headers.id = `sub-${this._counter++}`;\n        }\n        headers.destination = destination;\n        this._subscriptions[headers.id] = callback;\n        this._transmit({ command: 'SUBSCRIBE', headers });\n        const client = this;\n        return {\n            id: headers.id,\n            unsubscribe(hdrs) {\n                return client.unsubscribe(headers.id, hdrs);\n            },\n        };\n    }\n    unsubscribe(id, headers = {}) {\n        headers = Object.assign({}, headers);\n        delete this._subscriptions[id];\n        headers.id = id;\n        this._transmit({ command: 'UNSUBSCRIBE', headers });\n    }\n    begin(transactionId) {\n        const txId = transactionId || `tx-${this._counter++}`;\n        this._transmit({\n            command: 'BEGIN',\n            headers: {\n                transaction: txId,\n            },\n        });\n        const client = this;\n        return {\n            id: txId,\n            commit() {\n                client.commit(txId);\n            },\n            abort() {\n                client.abort(txId);\n            },\n        };\n    }\n    commit(transactionId) {\n        this._transmit({\n            command: 'COMMIT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    abort(transactionId) {\n        this._transmit({\n            command: 'ABORT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    ack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        this._transmit({ command: 'ACK', headers });\n    }\n    nack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        return this._transmit({ command: 'NACK', headers });\n    }\n}\n//# sourceMappingURL=stomp-handler.js.map","/**\n * @internal\n */\nexport function augmentWebsocket(webSocket, debug) {\n    webSocket.terminate = function () {\n        const noOp = () => { };\n        // set all callbacks to no op\n        this.onerror = noOp;\n        this.onmessage = noOp;\n        this.onopen = noOp;\n        const ts = new Date();\n        const id = Math.random().toString().substring(2, 8); // A simulated id\n        const origOnClose = this.onclose;\n        // Track delay in actual closure of the socket\n        this.onclose = closeEvent => {\n            const delay = new Date().getTime() - ts.getTime();\n            debug(`Discarded socket (#${id})  closed after ${delay}ms, with code/reason: ${closeEvent.code}/${closeEvent.reason}`);\n        };\n        this.close();\n        origOnClose?.call(webSocket, {\n            code: 4001,\n            reason: `Quick discarding socket (#${id}) without waiting for the shutdown sequence.`,\n            wasClean: false,\n        });\n    };\n}\n//# sourceMappingURL=augment-websocket.js.map","import { StompHandler } from './stomp-handler.js';\nimport { ActivationState, StompSocketState, } from './types.js';\nimport { Versions } from './versions.js';\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Client {\n    /**\n     * Create an instance.\n     */\n    constructor(conf = {}) {\n        /**\n         * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\n         *\n         * Example:\n         * ```javascript\n         *        // Try only versions 1.1 and 1.0\n         *        client.stompVersions = new Versions(['1.1', '1.0'])\n         * ```\n         */\n        this.stompVersions = Versions.default;\n        /**\n         * Will retry if Stomp connection is not established in specified milliseconds.\n         * Default 0, which switches off automatic reconnection.\n         */\n        this.connectionTimeout = 0;\n        /**\n         *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n         */\n        this.reconnectDelay = 5000;\n        /**\n         * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatIncoming = 10000;\n        /**\n         * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatOutgoing = 10000;\n        /**\n         * This switches on a non-standard behavior while sending WebSocket packets.\n         * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n         * Only Java Spring brokers seem to support this mode.\n         *\n         * WebSockets, by itself, split large (text) packets,\n         * so it is not needed with a truly compliant STOMP/WebSocket broker.\n         * Setting it for such a broker will cause large messages to fail.\n         *\n         * `false` by default.\n         *\n         * Binary frames are never split.\n         */\n        this.splitLargeFrames = false;\n        /**\n         * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n         * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n         */\n        this.maxWebSocketChunkSize = 8 * 1024;\n        /**\n         * Usually the\n         * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n         * is automatically decided by type of the payload.\n         * Default is `false`, which should work with all compliant brokers.\n         *\n         * Set this flag to force binary frames.\n         */\n        this.forceBinaryWSFrames = false;\n        /**\n         * A bug in ReactNative chops a string on occurrence of a NULL.\n         * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n         * This makes incoming WebSocket messages invalid STOMP packets.\n         * Setting this flag attempts to reverse the damage by appending a NULL.\n         * If the broker splits a large message into multiple WebSocket messages,\n         * this flag will cause data loss and abnormal termination of connection.\n         *\n         * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n         */\n        this.appendMissingNULLonIncoming = false;\n        /**\n         * Browsers do not immediately close WebSockets when `.close` is issued.\n         * This may cause reconnection to take a significantly long time in case\n         *  of some types of failures.\n         * In case of incoming heartbeat failure, this experimental flag instructs\n         * the library to discard the socket immediately\n         * (even before it is actually closed).\n         */\n        this.discardWebsocketOnCommFailure = false;\n        /**\n         * Activation state.\n         *\n         * It will usually be ACTIVE or INACTIVE.\n         * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\n         */\n        this.state = ActivationState.INACTIVE;\n        // No op callbacks\n        const noOp = () => { };\n        this.debug = noOp;\n        this.beforeConnect = noOp;\n        this.onConnect = noOp;\n        this.onDisconnect = noOp;\n        this.onUnhandledMessage = noOp;\n        this.onUnhandledReceipt = noOp;\n        this.onUnhandledFrame = noOp;\n        this.onStompError = noOp;\n        this.onWebSocketClose = noOp;\n        this.onWebSocketError = noOp;\n        this.logRawCommunication = false;\n        this.onChangeState = noOp;\n        // These parameters would typically get proper values before connect is called\n        this.connectHeaders = {};\n        this._disconnectHeaders = {};\n        // Apply configuration\n        this.configure(conf);\n    }\n    /**\n     * Underlying WebSocket instance, READONLY.\n     */\n    get webSocket() {\n        return this._stompHandler?._webSocket;\n    }\n    /**\n     * Disconnection headers.\n     */\n    get disconnectHeaders() {\n        return this._disconnectHeaders;\n    }\n    set disconnectHeaders(value) {\n        this._disconnectHeaders = value;\n        if (this._stompHandler) {\n            this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n        }\n    }\n    /**\n     * `true` if there is an active connection to STOMP Broker\n     */\n    get connected() {\n        return !!this._stompHandler && this._stompHandler.connected;\n    }\n    /**\n     * version of STOMP protocol negotiated with the server, READONLY\n     */\n    get connectedVersion() {\n        return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n    }\n    /**\n     * if the client is active (connected or going to reconnect)\n     */\n    get active() {\n        return this.state === ActivationState.ACTIVE;\n    }\n    _changeState(state) {\n        this.state = state;\n        this.onChangeState(state);\n    }\n    /**\n     * Update configuration.\n     */\n    configure(conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n    }\n    /**\n     * Initiate the connection with the broker.\n     * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n     * it will keep trying to reconnect.\n     *\n     * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n     */\n    activate() {\n        const _activate = () => {\n            if (this.active) {\n                this.debug('Already ACTIVE, ignoring request to activate');\n                return;\n            }\n            this._changeState(ActivationState.ACTIVE);\n            this._connect();\n        };\n        // if it is deactivating, wait for it to complete before activating.\n        if (this.state === ActivationState.DEACTIVATING) {\n            this.debug('Waiting for deactivation to finish before activating');\n            this.deactivate().then(() => {\n                _activate();\n            });\n        }\n        else {\n            _activate();\n        }\n    }\n    async _connect() {\n        await this.beforeConnect();\n        if (this._stompHandler) {\n            this.debug('There is already a stompHandler, skipping the call to connect');\n            return;\n        }\n        if (!this.active) {\n            this.debug('Client has been marked inactive, will not attempt to connect');\n            return;\n        }\n        // setup connection watcher\n        if (this.connectionTimeout > 0) {\n            // clear first\n            if (this._connectionWatcher) {\n                clearTimeout(this._connectionWatcher);\n            }\n            this._connectionWatcher = setTimeout(() => {\n                if (this.connected) {\n                    return;\n                }\n                // Connection not established, close the underlying socket\n                // a reconnection will be attempted\n                this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\n                this.forceDisconnect();\n            }, this.connectionTimeout);\n        }\n        this.debug('Opening Web Socket...');\n        // Get the actual WebSocket (or a similar object)\n        const webSocket = this._createWebSocket();\n        this._stompHandler = new StompHandler(this, webSocket, {\n            debug: this.debug,\n            stompVersions: this.stompVersions,\n            connectHeaders: this.connectHeaders,\n            disconnectHeaders: this._disconnectHeaders,\n            heartbeatIncoming: this.heartbeatIncoming,\n            heartbeatOutgoing: this.heartbeatOutgoing,\n            splitLargeFrames: this.splitLargeFrames,\n            maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n            forceBinaryWSFrames: this.forceBinaryWSFrames,\n            logRawCommunication: this.logRawCommunication,\n            appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n            discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n            onConnect: frame => {\n                // Successfully connected, stop the connection watcher\n                if (this._connectionWatcher) {\n                    clearTimeout(this._connectionWatcher);\n                    this._connectionWatcher = undefined;\n                }\n                if (!this.active) {\n                    this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n                    this._disposeStompHandler();\n                    return;\n                }\n                this.onConnect(frame);\n            },\n            onDisconnect: frame => {\n                this.onDisconnect(frame);\n            },\n            onStompError: frame => {\n                this.onStompError(frame);\n            },\n            onWebSocketClose: evt => {\n                this._stompHandler = undefined; // a new one will be created in case of a reconnect\n                if (this.state === ActivationState.DEACTIVATING) {\n                    // Mark deactivation complete\n                    this._changeState(ActivationState.INACTIVE);\n                }\n                // The callback is called before attempting to reconnect, this would allow the client\n                // to be `deactivated` in the callback.\n                this.onWebSocketClose(evt);\n                if (this.active) {\n                    this._schedule_reconnect();\n                }\n            },\n            onWebSocketError: evt => {\n                this.onWebSocketError(evt);\n            },\n            onUnhandledMessage: message => {\n                this.onUnhandledMessage(message);\n            },\n            onUnhandledReceipt: frame => {\n                this.onUnhandledReceipt(frame);\n            },\n            onUnhandledFrame: frame => {\n                this.onUnhandledFrame(frame);\n            },\n        });\n        this._stompHandler.start();\n    }\n    _createWebSocket() {\n        let webSocket;\n        if (this.webSocketFactory) {\n            webSocket = this.webSocketFactory();\n        }\n        else if (this.brokerURL) {\n            webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n        }\n        else {\n            throw new Error('Either brokerURL or webSocketFactory must be provided');\n        }\n        webSocket.binaryType = 'arraybuffer';\n        return webSocket;\n    }\n    _schedule_reconnect() {\n        if (this.reconnectDelay > 0) {\n            this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n            this._reconnector = setTimeout(() => {\n                this._connect();\n            }, this.reconnectDelay);\n        }\n    }\n    /**\n     * Disconnect if connected and stop auto reconnect loop.\n     * Appropriate callbacks will be invoked if there is an underlying STOMP connection.\n     *\n     * This call is async. It will resolve immediately if there is no underlying active websocket,\n     * otherwise, it will resolve after the underlying websocket is properly disposed of.\n     *\n     * It is not an error to invoke this method more than once.\n     * Each of those would resolve on completion of deactivation.\n     *\n     * To reactivate, you can call [Client#activate]{@link Client#activate}.\n     *\n     * Experimental: pass `force: true` to immediately discard the underlying connection.\n     * This mode will skip both the STOMP and the Websocket shutdown sequences.\n     * In some cases, browsers take a long time in the Websocket shutdown\n     * if the underlying connection had gone stale.\n     * Using this mode can speed up.\n     * When this mode is used, the actual Websocket may linger for a while\n     * and the broker may not realize that the connection is no longer in use.\n     *\n     * It is possible to invoke this method initially without the `force` option\n     * and subsequently, say after a wait, with the `force` option.\n     */\n    async deactivate(options = {}) {\n        const force = options.force || false;\n        const needToDispose = this.active;\n        let retPromise;\n        if (this.state === ActivationState.INACTIVE) {\n            this.debug(`Already INACTIVE, nothing more to do`);\n            return Promise.resolve();\n        }\n        this._changeState(ActivationState.DEACTIVATING);\n        // Clear if a reconnection was scheduled\n        if (this._reconnector) {\n            clearTimeout(this._reconnector);\n            this._reconnector = undefined;\n        }\n        if (this._stompHandler &&\n            // @ts-ignore - if there is a _stompHandler, there is the webSocket\n            this.webSocket.readyState !== StompSocketState.CLOSED) {\n            const origOnWebSocketClose = this._stompHandler.onWebSocketClose;\n            // we need to wait for the underlying websocket to close\n            retPromise = new Promise((resolve, reject) => {\n                // @ts-ignore - there is a _stompHandler\n                this._stompHandler.onWebSocketClose = evt => {\n                    origOnWebSocketClose(evt);\n                    resolve();\n                };\n            });\n        }\n        else {\n            // indicate that auto reconnect loop should terminate\n            this._changeState(ActivationState.INACTIVE);\n            return Promise.resolve();\n        }\n        if (force) {\n            this._stompHandler?.discardWebsocket();\n        }\n        else if (needToDispose) {\n            this._disposeStompHandler();\n        }\n        return retPromise;\n    }\n    /**\n     * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n     * This is different from a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n     * After forcing disconnect, automatic reconnect will be attempted.\n     * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n     */\n    forceDisconnect() {\n        if (this._stompHandler) {\n            this._stompHandler.forceDisconnect();\n        }\n    }\n    _disposeStompHandler() {\n        // Dispose STOMP Handler\n        if (this._stompHandler) {\n            this._stompHandler.dispose();\n        }\n    }\n    /**\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations.\n     *\n     * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\n     *\n     * `body` must be String.\n     * You will need to covert the payload to string in case it is not string (e.g. JSON).\n     *\n     * To send a binary message body, use `binaryBody` parameter. It should be a\n     * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     * Sometimes brokers may not support binary frames out of the box.\n     * Please check your broker documentation.\n     *\n     * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n     * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n     * For binary messages, `content-length` header is always added.\n     *\n     * Caution: The broker will, most likely, report an error and disconnect\n     * if the message body has NULL octet(s) and `content-length` header is missing.\n     *\n     * ```javascript\n     *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n     *\n     *        // Only destination is mandatory parameter\n     *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n     *\n     *        // Skip content-length header in the frame to the broker\n     *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n     *\n     *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n     *        // setting content-type header is not mandatory, however a good practice\n     *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n     *                         headers: {'content-type': 'application/octet-stream'}});\n     * ```\n     */\n    publish(params) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.publish(params);\n    }\n    _checkConnection() {\n        if (!this.connected) {\n            throw new TypeError('There is no underlying STOMP connection');\n        }\n    }\n    /**\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n     * The value (say receipt-id) for this header needs to be unique for each use.\n     * Typically, a sequence, a UUID, a random number or a combination may be used.\n     *\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n     * The operation needs to be matched based on the value of the receipt-id.\n     *\n     * This method allows watching for a receipt and invoking the callback\n     *  when the corresponding receipt has been received.\n     *\n     * The actual {@link IFrame} will be passed as parameter to the callback.\n     *\n     * Example:\n     * ```javascript\n     *        // Subscribing with acknowledgement\n     *        let receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *\n     *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n     *\n     *\n     *        // Publishing with acknowledgement\n     *        receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n     * ```\n     */\n    watchForReceipt(receiptId, callback) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * Subscribe to a STOMP Broker location. The callback will be invoked for each\n     * received message with the {@link IMessage} as argument.\n     *\n     * Note: The library will generate a unique ID if there is none provided in the headers.\n     *       To use your own ID, pass it using the `headers` argument.\n     *\n     * ```javascript\n     *        callback = function(message) {\n     *        // called when the client receives a STOMP message from the server\n     *          if (message.body) {\n     *            alert(\"got message with body \" + message.body)\n     *          } else {\n     *            alert(\"got empty message\");\n     *          }\n     *        });\n     *\n     *        var subscription = client.subscribe(\"/queue/test\", callback);\n     *\n     *        // Explicit subscription id\n     *        var mySubId = 'my-subscription-id-001';\n     *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n     * ```\n     */\n    subscribe(destination, callback, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.subscribe(destination, callback, headers);\n    }\n    /**\n     * It is preferable to unsubscribe from a subscription by calling\n     * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n     *\n     * ```javascript\n     *        var subscription = client.subscribe(destination, onmessage);\n     *        // ...\n     *        subscription.unsubscribe();\n     * ```\n     *\n     * See: https://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n     */\n    unsubscribe(id, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.unsubscribe(id, headers);\n    }\n    /**\n     * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n     * and [abort]{@link ITransaction#abort}.\n     *\n     * `transactionId` is optional, if not passed the library will generate it internally.\n     */\n    begin(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.begin(transactionId);\n    }\n    /**\n     * Commit a transaction.\n     *\n     * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.commit();\n     * ```\n     */\n    commit(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.commit(transactionId);\n    }\n    /**\n     * Abort a transaction.\n     * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.abort();\n     * ```\n     */\n    abort(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.abort(transactionId);\n    }\n    /**\n     * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // acknowledge it\n     *          message.ack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    ack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.ack(messageId, subscriptionId, headers);\n    }\n    /**\n     * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // an error occurs, nack it\n     *          message.nack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    nack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.nack(messageId, subscriptionId, headers);\n    }\n}\n//# sourceMappingURL=client.js.map","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { Client } from \"@stomp/stompjs\";\n\n/**\n * ExampleComponent is an example component.\n * It takes a property, `label`, and\n * displays it.\n * It renders an input with the property `value`\n * which is editable by the user.\n */\nexport default class STOMPWebsocket extends Component {\n\n    _init_client() {\n        let {url, subscribe} = this.props;\n        url = url? url : \"ws://\" + location.host + location.pathname + \"ws\";\n        this._client = new Client({\n            brokerURL: url,\n        })\n\n        this._client.activate();\n        if (subscribe) {\n            this._client.onConnect = () => {\n                this._subscribtion = this._client.subscribe(subscribe,\n                    message => {\n                        this.props.setProps({message: message.body})\n                    }\n                );\n            }\n        }\n    }\n\n    componentDidMount() {\n        this._init_client()\n    }\n\n    componentWillUnmount() {\n        this._client.deactivate();\n    }\n\n    componentDidUpdate(prevProps) {\n        const {subscribe, unsubscribe, send} = this.props;\n        console.log(subscribe, prevProps.subscribe, unsubscribe, prevProps.unsubscribe)\n        // Send messages.\n        if (unsubscribe && unsubscribe === prevProps.subscribe && subscribe !== prevProps.subscribe) {\n            this._subscribtion.unsubscribe();\n            this._subscribtion = this._client.subscribe(subscribe,\n                message => {\n                    this.props.setProps({message: message.body})\n                }\n            );\n            this.props.setProps({unsubscribe: null})\n        } else if (subscribe && subscribe !== prevProps.subscribe) {\n            this._subscribtion = this._client.subscribe(subscribe,\n                message => {\n                    this.props.setProps({message: message.body})\n                }\n            );\n        } else if (subscribe && unsubscribe && unsubscribe === subscribe) {\n            this._subscribtion.unsubscribe();\n            this.props.setProps({subscribe: null, unsubscribe: null})\n        } else if (send && send !== prevProps.send) {\n            this._client.publish({destination: send.destination, body: send.body});\n        }\n    }\n\n    render() {\n        return (null);\n    }\n}\n\nSTOMPWebsocket.defaultProps = {};\n\nSTOMPWebsocket.propTypes = {\n    \n    /**\n     * The url to connect to\n     */\n    url: PropTypes.string,\n\n    /**\n     * The topic to subscribe to.\n     */\n    subscribe: PropTypes.string,\n\n    /**\n     * The topic to unsubscribe from.\n     */\n    unsubscribe: PropTypes.string,\n\n    /**\n     * The message from subscription.\n     */\n    message: PropTypes.string,\n\n    /**\n     * The message to send\n     */\n    send: PropTypes.object,\n\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func\n};\n"],"names":["url","__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","getCurrentScript","script","document","currentScript","doc_scripts","getElementsByTagName","scripts","i","length","push","filter","s","async","text","textContent","slice","src","split","join","jsonpScriptSrc","__jsonpScriptSrc__","chunkId","isLocal","test","srcFragments","fileFragments","splice","window","BYTE","FrameImpl","constructor","params","command","headers","body","binaryBody","escapeHeaderValues","skipContentLengthHeader","this","assign","_binaryBody","isBinaryBody","_body","TextDecoder","decode","TextEncoder","encode","fromRawFrame","rawFrame","trim","str","replace","header","reverse","indexOf","hdrValueUnEscape","toString","serializeCmdAndHeaders","serialize","cmdAndHeaders","toUnit8Array","buffer","lines","name","keys","hdrValueEscape","isBodyEmpty","bodyLength","sizeOfUTF8","uint8CmdAndHeaders","nullTerminator","Uint8Array","uint8Frame","set","marshall","Parser","onFrame","onIncomingPing","_encoder","_decoder","_token","_initState","parseChunk","segment","appendMissingNULLonIncoming","chunk","chunkWithNull","byte","_onByte","_collectFrame","_collectCommand","_reinjectByte","_results","_consumeTokenAsUTF8","_collectHeaders","_consumeByte","_collectHeaderKey","_setupCollectBody","_headerKey","_collectHeaderValue","undefined","contentLengthHeader","_bodyBytesRemaining","parseInt","_collectBodyFixedSize","_collectBodyNullTerminated","_retrievedBody","_consumeTokenAsRaw","e","console","log","rawResult","StompSocketState","ActivationState","Versions","versions","supportedVersions","protocolVersions","map","x","V1_0","V1_1","V1_2","default","StompHandler","_client","_webSocket","config","_connected","_serverFrameHandlers","CONNECTED","frame","debug","server","_connectedVersion","version","_escapeHeaderValues","_setupHeartbeat","onConnect","MESSAGE","subscription","onReceive","_subscriptions","onUnhandledMessage","message","client","messageId","ack","nack","RECEIPT","callback","_receiptWatchers","onUnhandledReceipt","ERROR","onStompError","_counter","_partialData","_lastServerActivityTS","Date","now","stompVersions","connectHeaders","disconnectHeaders","heartbeatIncoming","heartbeatOutgoing","splitLargeFrames","maxWebSocketChunkSize","forceBinaryWSFrames","logRawCommunication","discardWebsocketOnCommFailure","onDisconnect","onWebSocketClose","onWebSocketError","onUnhandledFrame","connectedVersion","connected","start","parser","onmessage","evt","rawChunkAsString","data","ArrayBuffer","onclose","closeEvent","_cleanUp","onerror","errorEvent","onopen","_transmit","serverOutgoing","serverIncoming","v","ttl","Math","max","_pinger","setInterval","readyState","OPEN","send","_ponger","delta","_closeOrDiscardWebsocket","discardWebsocket","_closeWebsocket","forceDisconnect","CONNECTING","close","webSocket","terminate","msg","noOp","ts","id","random","substring","origOnClose","delay","getTime","code","reason","wasClean","rawChunk","out","dispose","receipt","watchForReceipt","error","clearInterval","publish","destination","hdrs","receiptId","subscribe","unsubscribe","begin","transactionId","txId","transaction","commit","abort","subscriptionId","Client","conf","connectionTimeout","reconnectDelay","state","INACTIVE","beforeConnect","onChangeState","_disconnectHeaders","configure","_stompHandler","active","ACTIVE","_changeState","activate","_activate","_connect","DEACTIVATING","deactivate","then","_connectionWatcher","clearTimeout","setTimeout","_createWebSocket","_disposeStompHandler","_schedule_reconnect","webSocketFactory","brokerURL","Error","WebSocket","binaryType","_reconnector","options","force","needToDispose","retPromise","Promise","resolve","CLOSED","origOnWebSocketClose","reject","_checkConnection","TypeError","STOMPWebsocket","_Component","_classCallCheck","_callSuper","arguments","_inherits","_this","_this$props","props","location","host","pathname","_subscribtion","setProps","_init_client","prevProps","_this2","_this$props2","Component","defaultProps","propTypes","PropTypes"],"sourceRoot":""}